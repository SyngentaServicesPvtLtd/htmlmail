<?php

/**
 * @file
 * Sends system emails in HTML.
 */

/**
 * Implements hook_init().
 */
function htmlmail_init() {
  if (!module_exists('mailsystem')) {
    drupal_set_message(
      t('Please install the required <a href="!mailsystem">Mail System</a> '
        . 'module, then re-enable <a href="!htmlmail">HTML Mail</a>',
        array(
          '!mailsystem' => url('http://drupal.org/project/mailsystem'),
          '!htmlmail' => url('http://drupal.org/project/htmlmail'),
        )
      )
    );
    module_disable(array('htmlmail'));
    drupal_goto('admin/build/modules');
  }
  // Drupal 6 doesn't have class autoload.
  if (module_exists('mailmime')) {
    module_load_include('inc', 'mailmime');
  }
  module_load_include('inc', 'htmlmail', 'htmlmail.mail');
}

/**
 * Implements hook_help().
 */
function htmlmail_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/htmlmail':
      return '<h2>' . t('Theming') . '</h2><p>' . t('The email message goes through three transformations before sending:') . '</p>';
    case 'admin/help#htmlmail':
      return '<p>' . t("HTML Mail provides formatting and semantic markup capabilities in email that are not available with plain text.") . '</p>';
    default:
      return '';
  }
}

/**
 * Implements hook_menu().
 */
function htmlmail_menu() {
  $items['admin/settings/htmlmail'] = array(
    'title' => 'HTML Mail',
    'description' => 'Configure HTML Mail system-wide settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('htmlmail_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'htmlmail.admin.inc',
  );
  $items['admin/settings/htmlmail/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '-2'
  );
  $items['admin/settings/htmlmail/test'] = array(
    'title' => 'Send Test',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('htmlmail_test_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'htmlmail.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function htmlmail_theme() {
  return array(
    'htmlmail' => array(
      'render element' => 'elements',
      'template' => 'htmlmail',
      'arguments' => array('message' => array()),
    ),
  );
}

/**
 * Process variables to format email messages.
 *
 * @see htmlmail.tpl.php
 */
function template_preprocess_htmlmail(array &$variables) {
  $message = $variables['message'];
  $variables += $message;
  $variables['debug'] = variable_get('htmlmail_debug', '0');
  $variables['theme_url'] = url($variables['directory'], array('absolute' => TRUE));
  $variables['message_id'] = $variables['module'] . '_' . $variables['key'];
  $last = 'htmlmail';
  foreach (explode('_', $variables['message_id']) as $part) {
    $variables['theme_hook_suggestions'][] = ($last .= "_$part");
  }
  // Backport of drupal 7 hook_preprocess_HOOK().
  foreach (module_implements('preprocess_htmlmail') as $module) {
    $function = $module . '_preprocess_htmlmail';
    $function($variables);
  }
}

/**
 * Implements hook_mail().
 */
function htmlmail_mail($key, &$message, $params) {
  $message['module'] = 'htmlmail';
  $message['key'] = $key;
  $message['subject'] = $params['subject'];
  $message['body'] = explode(
    MAIL_LINE_ENDINGS . MAIL_LINE_ENDINGS,
    $params['body']
  );
  return $message;
}

/**
 * Implements hook_user().
 */
function htmlmail_user($op, &$edit, $account, $category) {
  switch("$op.$category") {
    case 'form.account':
    case 'register.':
      return array(
        'htmlmail' => array(
          '#type' => 'fieldset',
          '#title' => t('HTML Mail'),
          '#collapsible' => TRUE,
          'htmlmail_plaintext' => array(
            '#type' => 'checkbox',
            '#title' => t('Plaintext-only emails'),
            '#default_value' => !empty($account->htmlmail_plaintext),
            '#description' => t(
              'The %htmlmail module can send emails with fonts, styles, and '
              . 'other HTML formatting.  If you prefer to receive all your '
              . 'emails in plain text, select this option.',
              array('%htmlmail' => 'HTML Mail')
            ),
          ),
        ),
      );
    default:
      return;
  }
}

/**
 * Returns an associative array of allowed themes.  The keys are the
 * machine-readable names and the values are the .info file names.
 * Based on code from the og_theme module.
 */
function &htmlmail_get_allowed_themes() {
  static $allowed = NULL;
  if (!isset($allowed)) {
    $allowed = array('' => t('No theme'));
    $themes = list_themes();
    module_load_include('inc', 'system', 'system.admin');
    uasort($themes, 'system_sort_modules_by_info_name');
    foreach ($themes as $key => $value) {
      if ($value->status) {
        $allowed[$key] = check_plain($value->info['name']);
      }
    }
  }
  return $allowed;
}

/**
 * Returns the selected theme to use for outgoing emails.
 */
function htmlmail_get_selected_theme(&$message = array()) {
  $selected = isset($message['theme'])
    ? $message['theme'] : variable_get('htmlmail_theme', '');
  // Make sure the selected theme is allowed.
  $themes = &htmlmail_get_allowed_themes();
  if (empty($themes[$selected])) {
    $selected = $GLOBALS['theme'];
  }
  return $selected;
}

/**
 * Checks whether a given recipient email prefers plaintext-only messages.
 *
 * @param $email
 *   The recipient email address.
 *
 * @return
 *   FALSE if the recipient prefers plaintext-only messages; otherwise TRUE.
 */
function htmlmail_is_allowed($email) {
  return !($recipient = user_load(array('mail' => $email)))
    || empty($recipient->htmlmail_plaintext);
}
