<?php

/**
 * @file
 * Send system emails in HTML.
 */

/**
 * Implements hook_help().
 */
function htmlmail_help($path, $arg) {
  switch ($path) {
    case 'admin/help#htmlmail':
    case 'admin/settings/htmlmail':
      $output = '<p>' . t("HTML Mail provides formatting and semantic markup capabilities in email that are not available with plain text.") . '</p>';
    return $output;
  }
}

/**
 * Implements hook_menu().
 */
function htmlmail_menu() {
  $items['admin/settings/htmlmail'] = array(
    'title' => 'HTML Mail',
    'description' => 'Configure HTML Mail system-wide settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('htmlmail_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'theme callback' => 'htmlmail_get_selected_theme',
    'file' => 'htmlmail.admin.inc',
  );
  $items['admin/settings/htmlmail/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'theme callback' => 'htmlmail_get_selected_theme',
    'weight' => '-2'
  );
  $items['admin/settings/htmlmail/test'] = array(
    'title' => 'Send Test',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('htmlmail_test_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'theme callback' => 'htmlmail_get_selected_theme',
    'file' => 'htmlmail.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_mail_alter().
 */
function htmlmail_mail_alter(&$message) {
  // Collapse the message body array.
  $message['body'] =
    is_array($message['body'])
    ? implode("\n\n", $message['body'])
    : $message['body'];

  // Optionally apply an input filter.
  if ((isset($message['format']) && ($filter = $message['format'])) ||
    ($filter = variable_get('htmlmail_prefilter'))) {
    $message['body'] = check_markup($message['body'], $filter);
  }

  // Apply the template file.
  $message['body'] = theme('htmlmail', $message);

  // Store a plaintext version.
  $message['plaintext'] = drupal_html_to_text($message['body']);

  // Send plaintext-only if the recipient prefers it.
  $recipient = user_load_by_mail($message['to']);
  if ($recipient && !empty($recipient->data['htmlmail_plaintext'])) {
    $message['headers']['Content-Type'] = 'text/plain; charset=UTF-8; format=flowed';
    $message['body'] = $message['plaintext'];
    return $message;
  }

  // Optionally apply the selected theme via internal http request.
  if ($theme = htmlmail_get_selected_theme($message['theme'])) {
    $url = url('admin/config/system/htmlmail/email', array('absolute' => TRUE));
    $data = 'body=' . rawurlencode($message['body'])
      . '&subject=' . rawurlencode($message['subject'])
      . '&theme=' . rawurlencode($theme);
    $options = array(
      'method' => 'POST',
      'data' => $data,
      'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
    );
    $response = drupal_http_request($url, $options);

    // Strip javascript as it doesn't work through email anyway.
    $message['body'] = preg_replace('@<script type="text/javascript".*</script>@Usi', '', $response->data);
  }

  // Optionally apply the selected output filter.
  if ($filter = variable_get('htmlmail_postfilter')) {
    $message['body'] = check_markup($message['body'], $filter);
  }

  // Store both plaintext and html versions.
  $boundary = uniqid(time(), 1);
  $message['headers']['Content-Type'] = "multipart/alternative; charset=utf-8; boundary=\"$boundary\"";
  $message['headers']['Content-Transfer-Encoding'] = '8bit';
  $message['headers']['MIME-Version'] = '1.0';
  $message['body'] = "This is a multi-part message in MIME format.
--$boundary
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 8bit

" . $message['plaintext'] . "

--$boundary
Content-Type: text/html; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 8bit

" . $message['body'] . "

--$boundary--
";

  // Break message body into individual lines before returning.
  $message['body'] = explode('\n', $message['body']);

  return $message;
}

/**
 * Implements hook_theme().
 */
function htmlmail_theme() {
  return array(
    'htmlmail' => array(
      'render element' => 'elements',
      'template' => 'htmlmail',
    ),
  );
}

/**
 * Process variables to format email messages.
 *
 * @see htmlmail.tpl.php
 */
function template_preprocess_htmlmail(&$variables) {
  $variables['debug'] = variable_get('htmlmail_debug', '0');
  $variables['theme_url'] = url($variables['directory'], array('absolute' => TRUE));
  $variables['theme_hook_suggestions'][] = $last = 'htmlmail-' . $variables['module'];
  $parts = array_diff_assoc(
    explode('_', $variables['message_id'] = $variables['key']),
    explode('_', $variables['module'])
  );
  $variables['key'] = implode('_', $parts);
  foreach ($parts as $part) {
    $variables['theme_hook_suggestions'][] = $last .= '_' . $part;
  }
  foreach (module_implements('preprocess_htmlmail') as $module) {
    $function = $module . '_preprocess_htmlmail';
    $function($variables);
  }
}

/**
 * Implements hook_mail().
 */
function htmlmail_mail($key, &$message, $params) {
  switch ($key) {
  case 'test':
    $message['subject'] = $params['subject'];
    $message['body'] = explode("\n\n", $params['body']);
    break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function htmlmail_form_user_profile_form_alter(&$form, &$form_state) {
  if ($form['#user_category'] == 'account') {
    $account = $form['#user'];
    $form['htmlmail'] = array(
      '#type' => 'fieldset',
      '#title' => t('HTML Mail'),
      '#collapsible' => TRUE,
    );
    $form['htmlmail']['htmlmail_plaintext'] = array(
      '#type' => 'checkbox',
      '#title' => t('Plaintext-only emails'),
      '#default_value' => empty($account->data['htmlmail_plaintext']) ? FALSE : 1,
      '#description' => t('The %m module can send emails with fonts, styles, and other HTML formatting.  If you prefer to receive all your emails in plain text, select this option.', array('%m' => 'HTML Mail')),
    );
  }
}

/**
 * Implements hook_user().
 */
function htmlmail_user($op, &$edit, $account, $category) {
  if ($op == 'submit') {
    $edit['data']['htmlmail_plaintext'] = empty($edit['htmlmail_plaintext']) ? 0 : 1;
  }
}

/**
 * Returns an associative array of allowed themes.  The keys are the
 * machine-readable names and the values are the .info file names.
 * Code shamelessly stolen from the og_theme module.
 */
function htmlmail_get_allowed_themes() {
  static $allowed;
  if (!isset($allowed)) {
    $allowed = array('' => t('No theme'));
    $themes = list_themes();
    module_load_include('inc', 'system', 'system.admin');
    uasort($themes, 'system_sort_modules_by_info_name');
    foreach ($themes as $key => $value) {
      if ($value->status) {
        $allowed[$key] = check_plain($value->info['name']);
      }
    }
  }
  return $allowed;
}

/**
 * Returns the selected theme to use for outgoing emails.
 * for use in a theme callback function.
 */
function htmlmail_get_selected_theme(&$selected = NULL) {
  if (!isset($selected)) {
    $selected = variable_get('htmlmail_theme', '');
  }
  // Make sure the selected theme is allowed.
  $themes = htmlmail_get_allowed_themes();
  if (isset($themes[$selected])) {
    return $selected;
  }
  // If a theme was specified but not allowed, fall back to site defaults.
  return $GLOBALS['theme'];
}
