<?php

/**
 * @file
 * Send system emails in HTML
 */

/**
 * Implementation of hook_help().
 */
function htmlmail_help($path, $arg) {
  switch ($path) {
    case 'admin/help#htmlmail':
    case 'admin/settings/htmlmail':
      $output = '<p>' . t("HTML Mail provides formatting and semantic markup capabilities in e-mail that are not available with plain text. All system emails are effected if this module is enabled.") . '</p>';
    return $output;
  }
}

/**
 * Implementation of hook_menu().
 */
function htmlmail_menu() {
  $items['admin/config/system/htmlmail'] = array(
    'title' => 'HTML Mail',
    'description' => 'Configure HTML Mail system-wide settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('htmlmail_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'htmlmail.admin.inc',
   );
  $items['admin/config/system/htmlmail/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '-2'
  );
  $items['admin/config/system/htmlmail/template'] = array(
     'title' => 'Template',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('htmlmail_template_settings'),
     'access arguments' => array('access administration pages'),
     'type' => MENU_LOCAL_TASK,
     'weight' => '-1',
     'file' => 'htmlmail.admin.inc',
   );
  $items['admin/config/system/htmlmail/test'] = array(
     'title' => 'Send Test',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('htmlmail_test_form'),
     'access arguments' => array('access administration pages'),
     'type' => MENU_LOCAL_TASK,
     'file' => 'htmlmail.admin.inc',
   );
  return $items;
}

/**
 * Implementation of hook_mail_alter().
 */
function htmlmail_mail_alter(&$message) {

// TODO, move all this from hook_mail_alter to mail.inc MailSystemInterface

  $plain_match = 0;
  // Match plain exclusions settings
  if ($plain_settings = variable_get('htmlmail_plain_settings', '')) {
    $items = preg_split('/(\r\n?|\n)/', $plain_settings);

    // Note: Drupal bug if module name contains underscore this may break (fixed in D7)
    $plain_match = in_array($message['module'], $items);

    // reverse $plain_match if type is include
    if (variable_get('htmlmail_plain_type', 0)) {
      $plain_match = !$plain_match;
    }
  }

  if (!$plain_match) { // All good, make mail html
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed;';
  
    // message body is probably an array (is that always the case with d7? checking anyways
    $message['body'] = is_array($message['body']) ? implode("\n\n", $message['body']) : $message['body'];

    // The paragraph an break stuff
    if (variable_get('htmlmail_autop', '1')) {
      $message['body'] = _filter_autop($message['body']);
    }

    // using drupal's url filter (filter.module)
    if (variable_get('htmlmail_urlfilter', '1')) {
      $filter->settings['filter_url_length'] = 72;
      $message['body'] = _filter_url($message['body'], $filter);
    }

    // Theme from template htmlmail.tpl.php
    $message['body'] = theme('htmlmail', $message);

    // Emogrify
    if (variable_get('htmlmail_emogrifier', '0')) {
      $message['body'] = _htmlmail_emogrify($message);
    }

    // Send the module name in email for theme template suggestions
    if (variable_get('htmlmail_debug', '0')) {
      $message['body'] .= '<p>Debug: module = ' . $message['module'] . '</p>';
    }
    $message['body'] = explode("\n\n", $message['body']);
  }
}

/**
 * Implementation of hook_theme().
 */
function htmlmail_theme() {
  return array(
    'htmlmail' => array(
      'render element' => 'elements',
      'template' => 'htmlmail',
    ),
  ); 
}

/**
 * Process variables to format e-mail.
 *
 * @see htmlmail.tpl.php
 */
function template_preprocess_htmlmail(&$variables) {
  $variables['path'] = url($variables['directory'], array('absolute' => TRUE));
  $variables['header'] = variable_get('htmlmail_header', '');
  $variables['footer'] = variable_get('htmlmail_footer', '');
  $variables['css'] = variable_get('htmlmail_css', '');
  $variables['template_files'][] = 'htmlmail-' . $variables['module'];
}

/**
 * Implementation of hook_mail().
 */
function htmlmail_mail($key, &$message, $params) {
  switch ($key) {
  case 'test':
    $message['subject'] = $params['subject'];
    $message['body'] = explode("\n\n", $params['body']);
    break;
  }
}

/**
 * If the Emogrifier <http://www.pelagodesign.com/sidecar/emogrifier/> exists,
 * the CSS styles inside the the $message['body'] are inserted into the other
 * HTML tags within the same $message['body'] as inline style attributes, 
 * based on CSS selectors.
 *
 * This function is based on code in the simplenews_template module.
 *
 * This emogrifier differs from that of simplenews_template in that it permits
 * modules or users to adjoin CSS into the $message['body'] using the HTML 
 * <style> tag.  The function searches the entire body for style tags, 
 * concatenates them in order of appearance in the file, then sends them to
 * the Emogrifier script. 
 *
 * Note that the method modifies the $message['body'] directly, and the 
 * return value is the modified $message['body'] string as well. 
 *
 * @param $message
 *           The message array to be sent. This function works directly 
 *           on the $message['body'].
 * @return $message['body']
 *           The modified message body string with inlined CSS applied.
 */
function _htmlmail_emogrify(&$message) {
  $path = drupal_get_path('module', 'htmlmail') . '/emogrifier/emogrifier.php';
  if (is_file($path)) {
    $style = array();
    // Pull out the contents of any style tags
    if (preg_match_all("@<style[^>]*>(.*)</style>@Usi", $message['body'], $matches, PREG_PATTERN_ORDER)) {
      $style = $matches[1];
    }
    // Emogrify can't handle several CSS rules on one line. As a precaution,
    // we therefore insert LF after each closing bracket.
    $style = preg_replace('/}\s*/', "}\n", implode("\n", $style));

    // Inline the CSS rules.
    include_once $path;
    // get and reset error levels so we dont get DOMDocument::loadHTML() errors
    $errorlevel = error_reporting();
    error_reporting(0);
    $emogrifier = new Emogrifier($message['body'], $style);
    $message['body'] = $emogrifier->emogrify();
    error_reporting($errorlevel);
  }
  return $message['body'];
}
