<?php
// $Id$

/**
 * @file
 * Send system emails in HTML format.
 */

function htmlmail_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#htmlmail":
      $output = '<p>'.  t('This is the HTML Mail module to allow system email to send in HTML format.') .'</p>';
      break;
  }
  return $output;
}

function htmlmail_mail_alter(&$message) {

  if (!preg_match('/text\/html/', $message['headers']['Content-Type'])) {
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8;';
  }

  // as of d6 body may be array
  $message['body'] = is_array($message['body']) ? implode("\n\n", $message['body']) : $message['body'];
  
  // The paragraph an break stuff
  if (variable_get('htmlmail_autop', '1') == 1) {
    $message['body'] = _filter_autop($message['body']);
  }

  // Insert the preformatted HTML so the end user only needs to enter what goes between the <body> tags.
  // this of course can be overridden in the admin settings for this module.
  if (variable_get('htmlmail_preformat', '1') == 1) {
    $message['body'] = theme('htmlmail', $message['body']);
  }

  if (variable_get('htmlmail_urlfilter', '1') == 1) {
    $message['body'] = _htmlmail_url($message['body']);
  }

  if (variable_get('htmlmail_emogrifier', '0') == 1) {
    $message['body'] = _htmlmail_emogrify($message);
  }

}

function htmlmail_theme() {
  return array(
    'htmlmail' => array(
    'arguments' => array('body' => NULL),
    ),
  );
}

function theme_htmlmail($body) {
  $output = '';

  $output .= "<html>\n";
  $output .= "<head>\n";
  $output .= "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n";

  $css = variable_get('htmlmail_css', '');
  if (!empty($css)) {
    $output .= '<style type="text/css">'."\n". $css ."\n</style>\n";
  }

  $output .= "</head>\n";
  $output .= "<body id=\"htmlmail-body\">\n". 
                variable_get('htmlmail_header', '') ."\n". 
                $body ."\n". 
                variable_get('htmlmail_footer', '') ."\n</body>\n";
  $output .= "</html>\n";
  
  return $output;
}

function htmlmail_menu() {
  $items = array();

  $items['admin/settings/htmlmail'] = array(
    'title' => 'HTML Mail',
    'description' => 'Configure HTML Mail',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('htmlmail_settings'),
    'description' => 'Configure HTML Mail administration options',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
   );

   $items['admin/settings/htmlmail/settings'] = array(
      'title' => 'Settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('htmlmail_settings'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => '-1'
   );

   $items['admin/settings/htmlmail/test'] = array(
     'title' => 'Send Test',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('htmlmail_admin_test_form'),
     'type' => MENU_LOCAL_TASK,
     'access arguments' => array('access administration pages'),
   );
  return $items;
}

function htmlmail_settings() {
  $form = array();

  $form['htmlmail_settings']['htmlmail_autop'] = array(
    '#type' => 'checkbox',
    '#title' => t('Line break converter'),
    '#default_value' => variable_get('htmlmail_autop', '1'),
    '#description' => t('Converts line breaks into HTML (i.e. &lt;br&gt; and &lt;p&gt; tags, ala filter.module).'),
  );

  $form['htmlmail_settings']['htmlmail_urlfilter'] = array(
    '#type' => 'checkbox',
    '#title' => t('URL Filter'),
    '#default_value' => variable_get('htmlmail_urlfilter', '1'),
    '#description' => t('Automatically converts text web addresses (URLs, e-mail addresses, ftp links, etc.) into hyperlinks.'),
  );

  $form['htmlmail_settings']['htmlmail_emogrifier'] = array(
    '#type' => 'checkbox',
    '#title' => t('Emogrifier'),
    '#default_value' => variable_get('htmlmail_emogrifier', '0'),
    '#description' => t('Emogrifier automagically transmogrifies your HTML by parsing your CSS and inserting your CSS definitions into tags within your HTML based on your CSS selectors.<br />Requires <a href="http://www.pelagodesign.com/sidecar/emogrifier">Emogrifier</a> residing in module directory'),
  );

  $form['htmlmail_settings']['htmlmail_preformat'] = array(
    '#type' => 'checkbox',
    '#title' => t('Preformat HTML code'),
    '#default_value' => variable_get('htmlmail_preformat', '1'),
    '#description' => t('Automagically inserts the &lt;HTML&gt; &lt;HEAD&gt; &lt;BODY&gt; tags, untick if you want control over this. You should check this if using a WYSIWYG editor.'),
  );

  $form['htmlmail_settings']['htmlmail_urllength'] = array(
    '#type' => 'textfield',
    '#title' => t('URL Trim Length'),
    '#default_value' => variable_get('htmlmail_urllength', '72'),
    '#size' => 3,
    '#description' => t('Trim URL displays to this length. This does not affect the href attribute. Enter "0" to disable trimming. Default is 72.'),
  );

  $form['htmlmail_settings']['htmlmail_test_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Send Test E-mail to'),
    '#default_value' => variable_get('htmlmail_test_email', variable_get('site_mail', '')),
    '#size' => 40,
    '#maxlength' => 128,
    '#description' => t('Enter the email address for test emails, defaults to site email. '. l('Send Test', 'admin/settings/htmlmail/test')),
  );

  $form['htmlmail_settings']['header_footer'] = array(
    '#type' => 'fieldset',
    '#title' => t('Header, Footer and CSS'),
    '#collapsible' => TRUE,
    '#collapsed'   => TRUE,
    '#description' => t('System wide HTML header and footer template.'),
  );

  $form['htmlmail_settings']['header_footer']['htmlmail_header'] = array(
    '#type' => 'textarea',
    '#title' => t('Header HTML'),
    '#default_value' => variable_get('htmlmail_header', ''),
  );

  $form['htmlmail_settings']['header_footer']['htmlmail_footer'] = array(
    '#type' => 'textarea',
    '#title' => t('Footer HTML'),
    '#default_value' => variable_get('htmlmail_footer', ''),
  );

  $form['htmlmail_settings']['header_footer']['htmlmail_css'] = array(
    '#type' => 'textarea',
    '#title' => t('CSS'),
    '#default_value' => variable_get('htmlmail_css', ''),
  );

  return system_settings_form($form);
}

function htmlmail_admin_test_form($form_values = NULL) {
  $form['test_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#size' => 40,
    '#default_value' => variable_get('htmlmail_test_subject', ''),
    '#maxlength' => 128,
  );

  $form['test_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#rows' => 20,
    '#default_value' => variable_get('htmlmail_test_body', ''),
    '#description' => t('Formatted in HTML.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

function htmlmail_mail($key, &$message, $params) {
  switch ($key) {
  case 'htmlmail_test':
    $message['subject'] = $params['subject'];
    $message['body'] = $params['body'];
    break;
  }
}

function htmlmail_admin_test_form_submit($form, &$form_state) {
  if ($form_state['values']['test_subject']) {
    variable_set('htmlmail_test_subject', $form_state['values']['test_subject']);
  }
  if ($form_state['values']['test_body']) {
    variable_set('htmlmail_test_body', $form_state['values']['test_body']);
  }
  
  $message['id'] = 'htmlmail_test';
  $message['to'] = variable_get('htmlmail_test_email', variable_get('site_mail', ''));
  $message['subject'] = $form_state['values']['test_subject'];
  $message['body'] = $form_state['values']['test_body'];

  $to = variable_get('htmlmail_test_email', variable_get('site_mail', ''));
  $params = array(
    'body' => $form_state['values']['test_body'],
    'subject' => $form_state['values']['test_subject']
  );

  if (drupal_mail('htmlmail', 'htmlmail_test', $to, language_default(), $params, $to)) {
    drupal_set_message('HTML Mail test message sent.');
  }

  else {
    drupal_set_message('drupal_mail failed');
  }
}

/**
 * URL filter. Automatically converts text web addresses (URLs, e-mail addresses,
 * ftp links, etc.) into hyperlinks.
 */
function _htmlmail_url($text) {
  // Pass length to regexp callback
  //_htmlmail_url_trim(NULL, 72);

  _htmlmail_url_trim(NULL, variable_get('htmlmail_urllength', 72));

  $text   = ' '. $text .' ';

  // Match absolute URLs.
  $text = preg_replace_callback("`(<p>|<li>|<br\s*/?>|[ \n\r\t\(])((http://|https://|ftp://|mailto:|smb://|afp://|file://|gopher://|news://|ssl://|sslv2://|sslv3://|tls://|tcp://|udp://)([a-zA-Z0-9@:%_+*~#?&=.,/;-]*[a-zA-Z0-9@:%_+*~#&=/;-]))([.,?!]*?)(?=(</p>|</li>|<br\s*/?>|[ \n\r\t\)]))`i", '_htmlmail_url_parse_full_links', $text);

  // Match e-mail addresses.
  $text = preg_replace("`(<p>|<li>|<br\s*/?>|[ \n\r\t\(])([A-Za-z0-9._-]+@[A-Za-z0-9._+-]+\.[A-Za-z]{2,4})([.,?!]*?)(?=(</p>|</li>|<br\s*/?>|[ \n\r\t\)]))`i", '\1<a href="mailto:\2">\2</a>\3', $text);

  // Match www domains/addresses.
  $text = preg_replace_callback("`(<p>|<li>|[ \n\r\t\(])(www\.[a-zA-Z0-9@:%_+*~#?&=.,/;-]*[a-zA-Z0-9@:%_+~#\&=/;-])([.,?!]*?)(?=(</p>|</li>|<br\s*/?>|[ \n\r\t\)]))`i", '_htmlmail_url_parse_partial_links', $text);
  $text = substr($text, 1, -1);

  return $text;
}

/**
 * Make links out of absolute URLs.
 */
function _htmlmail_url_parse_full_links($match) {
  $match[2] = decode_entities($match[2]);
  $caption = check_plain(_htmlmail_url_trim($match[2]));
  $match[2] = check_url($match[2]);
  return $match[1] .'<a href="'. $match[2] .'" title="'. $match[2] .'">'. $caption .'</a>'. $match[5];
}

/**
 * Make links out of domain names starting with "www."
 */
function _htmlmail_url_parse_partial_links($match) {
  $match[2] = decode_entities($match[2]);
  $caption = check_plain(_htmlmail_url_trim($match[2]));
  $match[2] = check_plain($match[2]);
  return $match[1] .'<a href="http://'. $match[2] .'" title="'. $match[2] .'">'. $caption .'</a>'. $match[3];
}

/**
 * Shortens long URLs to http://www.example.com/long/url...
 */
function _htmlmail_url_trim($text, $length = NULL) {
  static $_length;
  if ($length !== NULL) {
    $_length = $length;
  }
  if ($_length != 0 && strlen($text) > $_length) {
    $text = substr($text, 0, $_length) .'...';
  }
  return $text;
}



/**
 * If the Emogrifier <http://www.pelagodesign.com/sidecar/emogrifier/> exists,
 * the CSS styles inside the the $message['body'] are inserted into the other
 * HTML tags within the same $message['body'] as inline style attributes, 
 * based on CSS selectors.
 *
 * This function is based on code in the simplenews_template module.
 *
 * This emogrifier differs from that of simplenews_template in that it permits
 * modules or users to adjoin CSS into the $message['body'] using the HTML 
 * <style> tag.  The function searches the entire body for style tags, 
 * concatenates them in order of appearance in the file, then sends them to
 * the Emogrifier script. 
 *
 * Note that the method modifies the $message['body'] directly, and the 
 * return value is the modified $message['body'] string as well. 
 *
 *
 * @param $message
 *           The message array to be sent. This function works directly 
 *           on the $message['body'].
 * @return $message['body']
 *           The modified message body string with inlined CSS applied.
 */
function _htmlmail_emogrify(&$message) {
  $path = drupal_get_path('module', 'htmlmail') ."/emogrifier/emogrifier.php";
  //$path = "./$path/emogrifier.php";
  if (is_file($path)) {
    $style = array();
    //Pull out the contents of any style tags
    if (preg_match_all("@<style[^>]*>(.*)</style>@Usi", $message['body'], $matches, PREG_PATTERN_ORDER)) {
      $style = $matches[1];
    }
    // Emogrify can't handle several CSS rules on one line. As a precaution,
    // we therefore insert LF after each closing bracket.
    $style = preg_replace('/}\s*/', "}\n", implode("\n", $style));

    // Inline the CSS rules.
    include_once $path;
    $emogrifier = new Emogrifier($message['body'], $style);
    $message['body'] = $emogrifier->emogrify();
  }
  return $message['body'];
}

