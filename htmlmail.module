<?php

/**
 * @file
 * Sends system emails in HTML.
 */

/**
 * Implements hook_help().
 */
function htmlmail_help($path, $arg) {
  switch ($path) {
    case 'admin/help#htmlmail':
    case 'admin/settings/htmlmail':
      $output = '<p>' . t("HTML Mail provides formatting and semantic markup capabilities in email that are not available with plain text.") . '</p>';
    return $output;
  }
}

/**
 * Implements hook_menu().
 */
function htmlmail_menu() {
  $items['admin/config/system/htmlmail'] = array(
    'title' => 'HTML Mail',
    'description' => 'Configure HTML Mail system-wide settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('htmlmail_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'theme callback' => 'htmlmail_get_selected_theme',
    'file' => 'htmlmail.admin.inc',
  );
  $items['admin/config/system/htmlmail/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'theme callback' => 'htmlmail_get_selected_theme',
    'weight' => '-2'
  );
  $items['admin/config/system/htmlmail/test'] = array(
    'title' => 'Send Test',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('htmlmail_test_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'theme callback' => 'htmlmail_get_selected_theme',
    'file' => 'htmlmail.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function htmlmail_theme() {
  return array(
    'htmlmail' => array(
      'render element' => 'elements',
      'template' => 'htmlmail',
    ),
  );
}

/**
 * Process variables to format email messages.
 *
 * @see htmlmail.tpl.php
 */
function template_preprocess_htmlmail(&$variables) {
  $variables['debug'] = variable_get('htmlmail_debug', '0');
  $variables['theme_url'] = url($variables['directory'], array('absolute' => TRUE));
  $variables['theme_hook_suggestions'][] = $last = 'htmlmail-' . $variables['module'];
  $parts = array_diff_assoc(
    explode('_', $variables['message_id'] = $variables['key']),
    explode('_', $variables['module'])
  );
  $variables['key'] = implode('_', $parts);
  foreach ($parts as $part) {
    $variables['theme_hook_suggestions'][] = $last .= '_' . $part;
  }
}

/**
 * Implements hook_mail().
 */
function htmlmail_mail($key, &$message, $params) {
  switch ($key) {
  case 'test':
    $message['subject'] = $params['subject'];
    $message['body'] = explode("\n\n", $params['body']);
    break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function htmlmail_form_user_profile_form_alter(&$form, &$form_state) {
  if ($form['#user_category'] == 'account') {
    $account = $form['#user'];
    $form['htmlmail'] = array(
      '#type' => 'fieldset',
      '#title' => t('HTML Mail'),
      '#collapsible' => TRUE,
    );
    $form['htmlmail']['htmlmail_plaintext'] = array(
      '#type' => 'checkbox',
      '#title' => t('Plaintext-only emails'),
      '#default_value' => empty($account->data['htmlmail_plaintext']) ? FALSE : 1,
      '#description' => t('The %m module can send emails with fonts, styles, and other HTML formatting.  If you prefer to receive all your emails in plain text, select this option.', array('%m' => 'HTML Mail')),
    );
  }
}

/**
 * Implements hook_user_presave().
 */
function htmlmail_user_presave(&$edit, $account, $category) {
  $edit['data']['htmlmail_plaintext'] = empty($edit['htmlmail_plaintext']) ? 0 : 1;
}

/**
 * Returns an associative array of allowed themes.  The keys are the
 * machine-readable names and the values are the .info file names.
 * Code shamelessly stolen from the og_theme module.
 */
function &htmlmail_get_allowed_themes() {
  $allowed = &drupal_static(__FUNCTION__);
  if (!isset($allowed)) {
    $allowed = array('' => t('No theme'));
    module_load_include('inc', 'system', 'system.admin');
    $themes = list_themes();
    uasort($themes, 'system_sort_modules_by_info_name');
    foreach ($themes as $key => $value) {
      if ($value->status) {
        $allowed[$key] = check_plain($value->info['name']);
      }
    }
  }
  return $allowed;
}

/**
 * Returns the selected theme to use for outgoing emails.
 */
function htmlmail_get_selected_theme($message = array()) {
  $themes = &htmlmail_get_allowed_themes();
  return (empty($message['theme']) || empty($themes[$message['theme']]))
    ? variable_get('htmlmail_theme', $GLOBALS['theme'])
    : $message['theme'];
}
