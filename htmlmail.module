<?php
// $Id$

/**
 * @file
 * Send system emails in HTML
 */

/**
 * Implementation of hook_help().
 */
function htmlmail_help($section='') {
  switch ($section) {
    case 'admin/help#htmlmail':
    case 'admin/settings/htmlmail':
      $output = '<p>'.  t("HTML Mail provides formatting and semantic markup capabilities in e-mail that are not available with plain text. All system emails are effected if this module is enabled.") .'</p>';
  }
  return $output;
}

/**
 * Implementation of hook_menu().
 */
function htmlmail_menu() {
  $items = array();
  $items[] = array(
    'path' => 'admin/settings/htmlmail',
    'title' => t('HTML Mail'),
    'callback' => 'drupal_get_form',
    'callback arguments' => 'htmlmail_admin_settings',
    'description' => t('Configure HTML Mail system-wide settings.'),
    'access' => user_access('access administration pages')
  );
  $items[] = array(
    'path' => 'admin/settings/htmlmail/settings',
    'title' => t('Settings'),
    'callback' => 'drupal_get_form',
    'callback arguments' => 'htmlmail_admin',
    'access' => user_access('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
	  'weight' => '-2'
  );
  $items[] = array(
	  'path' => 'admin/settings/htmlmail/template',
    'title' => t('Template'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('htmlmail_template_settings'),
    'type' => MENU_LOCAL_TASK,
    'access' => user_access('access administration pages'),
    'weight' => '-1',
  );
  $items[] = array(
	  'path' => 'admin/settings/htmlmail/test',
    'title' => t('Send Test'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('htmlmail_test_form'),
    'type' => MENU_LOCAL_TASK,
    'access' => user_access('access administration pages'),
  );
  return $items;
}

function htmlmail_mail_alter($mailkey, &$recipient, &$subject, &$body, &$sender, &$headers) {
  $headers['Content-Type'] = 'text/html; charset="utf-8"';
	
	// The paragraph an break stuff
  if (variable_get('htmlmail_autop', '1') == 1) {
	  $body = _filter_autop($body);
	}

  // Theme from template htmlmail.tpl.php
  $body = theme('htmlmail', $body);

  if (variable_get('htmlmail_urlfilter', '1') == 1) {
		// defaults to 72 as there is no filter 0 -- make filters a configuration option?
    $body = _filter_url($body, 0);
  }
  return;
}


function theme_htmlmail($body) {
  $template = _htmlmail_template('path') .'/'. _htmlmail_template('file');
  $variables = array(
    'body' => $body,
    'path' => url('', NULL, NULL, TRUE) . _htmlmail_template('path'),
    'header' => variable_get('htmlmail_header', ''),
    'footer' => variable_get('htmlmail_footer', ''),
    'css' => variable_get('htmlmail_css', ''),
  );
  return _phptemplate_render($template, $variables);
}


function htmlmail_admin_settings() {
  $form['htmlmail_settings']['htmlmail_autop'] = array(
	  '#type' => 'checkbox',
    '#title' => t('Line break converter'),
    '#default_value' => variable_get('htmlmail_autop', '1'),
    '#description' => t('Converts line breaks into HTML (i.e. &lt;br&gt; and &lt;p&gt; tags, ala filter.module).')
  );
	$form['htmlmail_settings']['htmlmail_urlfilter'] = array(
	  '#type' => 'checkbox',
    '#title' => t('URL Filter'),
    '#default_value' => variable_get('htmlmail_urlfilter', '1'),
    '#description' => t('Automatically converts text web addresses (URLs, e-mail addresses, ftp links, etc.) into hyperlinks.')
  );	
  $form['htmlmail_settings']['htmlmail_preformat'] = array(
	  '#type' => 'checkbox',
    '#title' => t('Preformat HTML code'),
    '#default_value' => variable_get('htmlmail_preformat', '1'),
    '#description' => t('Automagically inserts the &lt;HTML&gt; &lt;HEAD&gt; &lt;BODY&gt; tags, untick if you want control over this. You should check this if using a WYSIWYG editor.')
  );
  return system_settings_form($form);
}

function htmlmail_template_settings() {
  $form['htmlmail_template'] = array(
    '#type' => 'select',
    '#title' => t('Template'),
    '#default_value' => variable_get('htmlmail_template', ''),
    '#description' => t('Select from default or HTML Mail templates installed in the current themes\'s directory.'),
    '#options' => _htmlmail_get_templates(),
  );
  $form['htmlmail_header'] = array(
    '#type' => 'textarea',
    '#title' => t('Header HTML'),
    '#default_value' => variable_get('htmlmail_header', ''),
  );
  $form['htmlmail_footer'] = array(
    '#type' => 'textarea',
    '#title' => t('Footer HTML'),
    '#default_value' => variable_get('htmlmail_footer', ''),
  );
  $form['htmlmail_css'] = array(
    '#type' => 'textarea',
    '#title' => t('CSS'),
    '#default_value' => variable_get('htmlmail_css', ''),
  );
  return system_settings_form($form);
}

function htmlmail_test_form($form_values = NULL) {
  $defaults = variable_get('htmlmail_test', array());
  $form['to'] = array(
    '#type' => 'textfield',
    '#title' => t('To'),
    '#default_value' => $defaults['to'],
    '#maxlength' => 128,
    '#required' => TRUE,
  );
  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $defaults['subject'],
    '#maxlength' => 128,
    '#required' => TRUE,
  );
  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#rows' => 20,
    '#default_value' => $defaults['body'],
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
	  '#value' => t('Submit'),
  );
	return $form;
}

function htmlmail_test_form_submit($form_id, $form_values) {
  variable_set('htmlmail_test', array(
      'to' => $form_values['to'],
      'subject' => $form_values['subject'],
      'body' => $form_values['body'],
    )
  );
  
	if (drupal_mail('htmlmail-test', $form_values['to'], $form_values['subject'], $form_values['body'], $form_values['to'])) {
	  drupal_set_message('Test mail sent.');
	}
	else {
	  drupal_set_message('drupal_mail failed');
	}
}


/**
 * Scan theme's directory for htmlmail templates: Return array for form select options
 */
function _htmlmail_get_templates() {
  $templates = array('' => 'Use Default');
  $files = file_scan_directory(path_to_theme(), '^htmlmail-.*\.tpl\.php$');
  foreach ($files as $file) {
    $templates[$file->filename] = $file->name;
  }
  return $templates;
}

/**
 * Build and return template path or filename, module directory if no template selected.
 */
function _htmlmail_template($type) {
  $template = variable_get('htmlmail_template', '');
  switch ($type) {
    case 'file':
      $output = empty($template) ? 'htmlmail.tpl.php' : basename($template);
      break;
    case 'path':
      $output = empty($template) ? drupal_get_path('module', 'htmlmail') : dirname($template);
      break;
  }
  return $output;
}