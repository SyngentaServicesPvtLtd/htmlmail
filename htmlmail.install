<?php

/**
 * @file
 * Installation for HTML Mail
 */

/**
 * Implementation of hook_install().
 */
function htmlmail_install() {
  db_query("UPDATE {system} SET weight = 1 WHERE name = 'htmlmail'");

  // Safely set $mail_system['htmlmail'] = 'HTMLMailMailSystem'
  variable_set(
    'mail_system',
    array_merge(
      variable_get(
        'mail_system',
        array('default-system' => 'DefaultMailSystem')
      ),
      array('htmlmail' => 'HTMLMailMailSystem')
    )
  );
}

/**
 * Implementation of hook_uninstall().
 */
function htmlmail_uninstall() {
  db_query("DELETE FROM {variable} WHERE name LIKE 'htmlmail_%'");
  $mail_system = variable_get('mail_system', array('default-system' => 'DefaultMailSystem'));
  if ($mail_system['default-system'] === 'HTMLMailMailSystem') {
    $mail_system['default-system'] = 'DefaultMailSystem';
  }
  foreach ($mail_system as $module => $class) {
    if ($class === 'HTMLMailMailSystem') {
      unset($mail_system[$module]);
    }
  }
  variable_set('mail_system', $mail_system);
  cache_clear_all('variables', 'cache');
}

/**
 * Implementation of hook_requirements().
 */
function htmlmail_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    $t = get_t();
    $libraries = module_exists('libraries');
    $requirements['libraries'] = array(
      'title' => 'Libraries module',
      'value' => $libraries ? 'Enabled' : 'Disabled',
      'severity' => $libraries ? REQUIREMENT_OK : REQUIREMENT_WARNING,
    );
    $dom = extension_loaded('dom');
    $requirements['dom'] = array(
       'title' => 'DOM extension',
       'value' => $dom ? 'Enabled' : 'Disabled',
       'description' => $t('The %d extension must be loaded before %e can be used with the %m module.',
                           array('%d' => 'dom',
                                 '%e' => 'emogrifier',
                                 '%m' => 'htmlmail')),
       'severity' => $dom ? REQUIREMENT_OK : REQUIREMENT_WARNING,
    );
    $transliteration = function_exists('transliteration_get');
    $requirements['transliteration'] = array(
      'title' => 'Transliteration module',
      'value' => $transliteration ? 'Enabled' : 'Disabled',
      'description' => $t(
        'The %m module optionally uses the %t module to ensure consistent display on mobile devices.',
        array(
          '%m' => 'htmlmail',
          '%t' => 'transliteration'
        )
      ),
      'severity' => $transliteration ? REQUIREMENT_OK : REQUIREMENT_WARNING,
    );
    $pathologic = (module_exists('pathologic') && function_exists('_pathologic'));
    $requirements['pathologic'] = array(
      'title' => 'Pathologic module',
      'value' => $pathologic ? 'Enabled' : 'Disabled',
      'description' => $t(
        'The %m module optionally uses the %p module to urls from relative to absolute form so that linked content is available to email recipients.',
        array(
          '%m' => 'htmlmail',
          '%p' => 'pathologic'
        )
      ),
      'severity' => $pathologic ? REQUIREMENT_OK : REQUIREMENT_WARNING,
    );
    if (module_load_include('inc','htmlmail','emogrifier/emogrifier')) {
      $paths = array();
      $emogrifier = _htmlmail_emogrifier($paths) !== FALSE;
      $requirements['emogrifier'] = array(
        'title' => 'Emogrifier class',
        'value' =>  $emogrifier ? 'Available' : 'Unavailable',
        'description' => $t("The %m module optionally uses the %l library to convert CSS to inline styles for more consistent display on webmail and mobile devices.  The following directories were searched: !p",
                            array('%m' => 'htmlmail',
                                  '%l' => 'emogrifier.php',
                                  '!p' => '<ul><li>' . implode('</li><li>',$paths) . '</li></ul>',
                                )
                            ),
        'severity' => $emogrifier ? REQUIREMENT_OK : REQUIREMENT_WARNING,
      );
    }
  }
  return $requirements;
}
